"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""
import asyncio
import logging
import os
import tempfile
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

from config import Config, setup_logging
from models.user import db, User
from chatgpt_client import ChatGPTClient
from services.smart_task_service import SmartTaskService
from services.voice_service import VoiceService
from services.internal_calendar_service import InternalCalendarService
from services.finance_service import FinanceService
from services.notification_scheduler import NotificationScheduler
from services.predictive_analytics import PredictiveAnalytics
from services.ticktick_integration import TickTickIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

class SuperPersonalAssistantBot:
    """–°—É–ø–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.config = Config()
        self.authorized_user_id = 398613499  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.chatgpt = ChatGPTClient()
        self.smart_tasks = SmartTaskService(str(self.authorized_user_id))
        self.voice_service = VoiceService()
        self.calendar_service = InternalCalendarService()
        self.finance_service = FinanceService()
        self.analytics = PredictiveAnalytics(str(self.authorized_user_id))
        self.ticktick = TickTickIntegration()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.config.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
        
        logger.info("–°—É–ø–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def check_authorization(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id == self.authorized_user_id
    
    async def unauthorized_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await update.message.reply_text("üîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("tasks", self.tasks_command))
        self.application.add_handler(CommandHandler("analytics", self.analytics_command))
        self.application.add_handler(CommandHandler("sync", self.sync_command))
        self.application.add_handler(CommandHandler("delegate", self.delegate_command))
        self.application.add_handler(CommandHandler("report", self.report_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        welcome_text = """
ü§ñ **–°—É–ø–µ—Ä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç** –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üß† **AI –§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

üìã **–ó–∞–¥–∞—á–∏:**
‚Ä¢ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ê–Ω—è, –î–∏–º–∞, –û–ª–µ–≥)
‚Ä¢ TickTick —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–µ –ø–ª–∞–Ω—ã

üì∏ **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ –ß–µ–∫–∏ –∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
‚Ä¢ –ó–∞–º–µ—Ç–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω!
        """
        
        keyboard = [
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"), KeyboardButton("üìà –û—Ç—á–µ—Ç")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        self.analytics.record_interaction('start_command')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `/tasks` - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
‚Ä¢ `/analytics` - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
‚Ä¢ `/sync` - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å TickTick
‚Ä¢ `/delegate` - –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ `/report` - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É - –ø–æ–ª—É—á–∏—Ç–µ –ø–ª–∞–Ω –∏ —Å–æ–≤–µ—Ç—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
3. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

**–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ **–ê–Ω—è** - –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ **–î–∏–º–∞** - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–∫–æ–Ω—Ç–µ–Ω—Ç, –∫—Ä–µ–∞—Ç–∏–≤—ã)
‚Ä¢ **–û–ª–µ–≥** - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø—Ä–æ—Ü–µ—Å—Å—ã)
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tasks"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            pending_tasks = self.smart_tasks.get_pending_tasks()
            delegated_tasks = self.smart_tasks.get_delegated_tasks()
            
            if not pending_tasks and not any(delegated_tasks.values()):
                await update.message.reply_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
                return
            
            response = "üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏:**\n\n"
            
            # –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            personal_tasks = [t for t in pending_tasks if not t.get('delegated_to')]
            if personal_tasks:
                response += "üë§ **–õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n"
                for task in personal_tasks[:5]:
                    status_icon = "üîÑ" if task['status'] == 'pending' else "‚úÖ"
                    response += f"{status_icon} {task['title']}\n"
                response += "\n"
            
            # –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for delegate_key, tasks in delegated_tasks.items():
                if tasks:
                    delegate_name = self.smart_tasks.delegates[delegate_key]['name']
                    response += f"üë• **–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {delegate_name}:**\n"
                    for task in tasks[:3]:
                        response += f"‚Ä¢ {task['title']}\n"
                    response += "\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")],
                [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="sync_tasks")],
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="show_analytics")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ tasks: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á")
    
    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /analytics"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            predictions = self.analytics.generate_predictions()
            insights = self.analytics.get_productivity_insights()
            
            response = "üß† **–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n"
            
            if predictions:
                response += "üîÆ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**\n"
                for pred in predictions:
                    confidence = int(pred['confidence'] * 100)
                    response += f"‚Ä¢ {pred['message']} ({confidence}%)\n"
                response += "\n"
            
            if insights:
                response += "üìä **–ò–Ω—Å–∞–π—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
                for key, insight in insights.items():
                    response += f"‚Ä¢ {insight['message']}\n"
                response += "\n"
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            response += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            current_hour = datetime.now().hour
            
            if 9 <= current_hour <= 11:
                response += "‚Ä¢ –£—Ç—Ä–æ - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è\n"
            elif 14 <= current_hour <= 16:
                response += "‚Ä¢ –î–µ–Ω—å - –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á\n"
            elif 17 <= current_hour <= 19:
                response += "‚Ä¢ –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤\n"
            
            keyboard = [
                [InlineKeyboardButton("üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="weekly_report")],
                [InlineKeyboardButton("üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ analytics: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    async def sync_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sync"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å TickTick...")
            
            result = await self.smart_tasks.sync_with_ticktick()
            
            if result.get('success'):
                response = f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                response += f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result.get('synced_count', 0)} –∑–∞–¥–∞—á\n"
                response += f"‚ûï –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {result.get('new_tasks', 0)}"
            else:
                response = f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            user_message = update.message.text
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            self.analytics.record_interaction('text_message', {'message': user_message})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            task_keywords = ['—Å–¥–µ–ª–∞—Ç—å', '–∑–∞–¥–∞—á–∞', '–Ω—É–∂–Ω–æ', '–ø–ª–∞–Ω', '–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å']
            
            if any(keyword in user_message.lower() for keyword in task_keywords):
                await self.handle_task_creation(update, context, user_message)
            else:
                # –û–±—ã—á–Ω—ã–π —á–∞—Ç —Å ChatGPT
                await self.handle_chat(update, context, user_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_task_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, task_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
            
            # –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –∑–∞–¥–∞—á—É
            task = await self.smart_tasks.create_smart_task(task_text)
            
            if task.get('error'):
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {task['error']}")
                return
            
            analysis = task.get('analysis', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            response += f"üìã **{task['title']}**\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            response += f"‚è±Ô∏è –í—Ä–µ–º—è: {analysis.get('estimated_time', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}\n"
            response += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis.get('priority', '—Å—Ä–µ–¥–Ω–∏–π')}\n\n"
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            suggested_delegate = analysis.get('suggested_delegate')
            if suggested_delegate:
                delegate_name = self.smart_tasks.delegates[suggested_delegate]['name']
                response += f"üë• **–†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å: {delegate_name}**\n\n"
            
            # –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            steps = analysis.get('steps', [])
            if steps:
                response += "üìù **–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:**\n"
                for i, step in enumerate(steps[:3], 1):
                    response += f"{i}. {step}\n"
                if len(steps) > 3:
                    response += f"... –∏ –µ—â–µ {len(steps) - 3} —à–∞–≥–æ–≤\n"
                response += "\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []
            if suggested_delegate:
                keyboard.append([InlineKeyboardButton(f"üë• –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å {delegate_name}", 
                                                    callback_data=f"delegate_{task['id']}_{suggested_delegate}")])
            
            keyboard.extend([
                [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"task_details_{task['id']}")],
                [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_task_{task['id']}")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    
    async def handle_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            predictions = self.analytics.generate_predictions()
            context_info = ""
            
            if predictions:
                context_info = "–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: " + "; ".join([p['message'] for p in predictions[:2]])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ChatGPT —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            user_id = update.effective_user.id
            full_message = f"{message}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_info}" if context_info else message
            response = await self.chatgpt.get_response(user_id, full_message)
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        if not self.check_authorization(update.effective_user.id):
            return
        
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            
            if data.startswith("delegate_"):
                parts = data.split("_")
                task_id = int(parts[1])
                delegate_key = parts[2]
                
                result = await self.smart_tasks.delegate_task(task_id, delegate_key)
                
                if result.get('success'):
                    response = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ {result['delegate']}!\n\n"
                    response += f"üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n{result['instructions']}"
                else:
                    response = f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {result.get('error')}"
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            
            elif data.startswith("task_details_"):
                task_id = int(data.split("_")[2])
                summary = await self.smart_tasks.get_task_summary(task_id)
                await query.edit_message_text(summary, parse_mode=ParseMode.MARKDOWN)
            
            elif data == "weekly_report":
                summary = self.analytics.get_weekly_summary()
                
                response = "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:**\n\n"
                response += f"üìã –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {summary.get('tasks_created', 0)}\n"
                response += f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary.get('total_expenses', 0)} –≥—Ä–Ω\n"
                
                if summary.get('most_active_day'):
                    response += f"üìÖ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {summary['most_active_day']}\n"
                
                if summary.get('productivity_score'):
                    response += f"üìà –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {summary['productivity_score']}/100\n"
                
                await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = await update.message.voice.get_file()
            
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                await voice_file.download_to_drive(temp_file.name)
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                text = await self.voice_service.speech_to_text(temp_file.name)
                
                if text:
                    await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    context.user_data['last_message'] = text
                    await self.handle_message(update, context)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not self.check_authorization(update.effective_user.id):
            await self.unauthorized_handler(update, context)
            return
        
        try:
            await update.message.reply_text("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_file = await update.message.photo[-1].get_file()
            
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                await photo_file.download_to_drive(temp_file.name)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                analysis = await self.chatgpt.analyze_image_with_text(temp_file.name)
                
                if analysis:
                    response = f"üîç **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n{analysis}\n\n"
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    keyboard = [
                        [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task_from_image")],
                        [InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense_from_image")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(response, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Å—É–ø–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

